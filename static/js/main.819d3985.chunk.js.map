{"version":3,"sources":["components/DecimalInput.js","components/BinaryInput.js","App.js","reportWebVitals.js","index.js"],"names":["DecimalInput","props","className","htmlFor","value","decimalValue","id","type","disabled","BinaryInput","useState","setValue","useEffect","match","handleError","handleBinary","onChange","event","target","maxLength","App","setBinary","decimal","setDecimal","errorMessage","setErrorMessage","style","color","parseInt","index","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAkBeA,MAhBf,SAAsBC,GAEpB,OACE,sBAAKC,UAAU,eAAf,UACM,uBAAOA,UAAU,QAAQC,QAAQ,iBAAjC,4BACJ,uBACEC,MAAOH,EAAMI,aACZC,GAAG,iBACJJ,UAAU,SACTK,KAAK,OACLC,UAAQ,QCwBFC,MAjCf,SAAqBR,GAEnB,MAA0BS,mBAAS,IAAnC,mBAAON,EAAP,KAAcO,EAAd,KAgBA,OAXGC,qBAAU,WACoB,OAA7BR,EAAMS,MAAM,aACXZ,EAAMa,YAAY,iDAElBb,EAAMa,YAAY,IAErBb,EAAMc,aAAaX,KACnB,CAACA,IAKD,sBAAKF,UAAU,cAAf,UACE,uBAAQA,UAAU,QAAQC,QAAQ,gBAAlC,oBACA,uBACCC,MAAOA,EACPY,SApBY,SAACC,GAChBN,EAASM,EAAMC,OAAOd,QAoBnBE,GAAG,gBACHJ,UAAU,SACVK,KAAK,OACLY,UAAU,UCaFC,MArCf,WACE,MAA4BV,mBAAS,IAArC,mBAAeW,GAAf,WACA,EAA8BX,mBAAS,IAAvC,mBAAOY,EAAP,KAAgBC,EAAhB,KACA,EAAwCb,mBAAS,IAAjD,mBAAOc,EAAP,KAAqBC,EAArB,KAmBA,OACE,sBAAKvB,UAAU,MAAf,UACE,oBAAIA,UAAU,cAAd,sCACA,qBAAKA,UAAU,8BAAf,SAA8CsB,GAAgB,sBAAME,MAAO,CAAEC,MAAO,OAAtB,SAAgCH,MAE9F,sBAAKtB,UAAU,0EAAf,UAEA,cAAC,EAAD,CAAaa,aAfI,SAACX,GACpB,IAAMkB,EAAUM,SAASxB,EAAO,GAChCiB,EAAUjB,GACVmB,EAAWD,IAYgCR,YApBzB,SAACe,GACnBC,QAAQC,IAAIF,GACZJ,EAAgBI,MAmBd,cAAC,EAAD,CAAcxB,aAAciB,WCxBnBU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.819d3985.chunk.js","sourcesContent":["\r\n\r\nfunction DecimalInput(props) {\r\n\r\n  return (\r\n    <div className=\"decimalInput\">\r\n          <label className=\"block\" htmlFor=\"input__decimal\">Decimal Output</label>\r\n      <input\r\n      \t value={props.decimalValue}\r\n         id=\"input__decimal\" \r\n      \t className=\"border\"\r\n         type=\"text\"\r\n         disabled\r\n       />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DecimalInput;\r\n","import {useState, useEffect} from 'react';\r\n\r\n\r\nfunction BinaryInput(props) {\r\n  \r\n  const [value, setValue] = useState('');\r\n  const onChange = (event) => {\r\n    setValue(event.target.value);  \r\n  };\r\n\r\n     useEffect(() => {\r\n\t\tif (value.match(/^[0-1]+$/g) === null) {\r\n\t      props.handleError(\"Enter either 0 or 1 and No more than 8 digits\");\r\n\t  \t} else{\r\n\t      props.handleError('');\r\n\t  \t}\r\n\t  \tprops.handleBinary(value);\r\n\t}, [value]);\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"binaryInput\">\r\n      <label  className=\"block\" htmlFor=\"input__binary\">Binary</label>\r\n      <input \r\n      \tvalue={value} \r\n      \tonChange={onChange} \r\n      \tid=\"input__binary\" \r\n      \tclassName=\"border\"\r\n      \ttype=\"text\"\r\n      \tmaxLength=\"8\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BinaryInput;\r\n","import {useState} from 'react';\n\nimport DecimalInput from './components/DecimalInput';\nimport BinaryInput from './components/BinaryInput';\n\n\nfunction App() {\n  const [binary, setBinary] = useState('');\n  const [decimal, setDecimal] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // const handleError(data) {\n  //   console.log(data);\n  // }\n\n  const handleError = (index) => {\n    console.log(index);\n    setErrorMessage(index);\n  };\n\n  const handleBinary = (value) => {\n    const decimal = parseInt(value, 2);\n    setBinary(value);\n    setDecimal(decimal);\n  };\n\n\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"text-center\">Binary-Decimal Converter</h1>\n      <div className=\"error text-center h-2 block\">{errorMessage && <span style={{ color: 'red' }}>{errorMessage}</span>}</div>\n\n      <div className=\"block md:flex justify-around items-center border p-12 max-w-3xl mx-auto\">\n\n      <BinaryInput handleBinary={handleBinary} handleError={handleError} />\n      <DecimalInput decimalValue={decimal} />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}